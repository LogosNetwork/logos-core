{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This template creates an Amazon EFS file system and mount target and associates it with Amazon EC2 instances in an Auto Scaling group. **WARNING** This template creates Amazon EC2 instances and related resources. You will be billed for the AWS resources used if you create a stack from this template.",
  "Parameters": {
    "LogosVersion": {
      "Type" : "String",
      "Description" : "Enter version identifier for corresponding logos_core (logos) binary version."
    },
    "AgentVersion": {
      "Type" : "String",
      "Description" : "Enter version identifier for corresponding agent.py version."
    },
    "LDBVersion": {
      "Type" : "String",
      "Description" : "Enter version identifier for corresponding data.ldb version."
    },
    "ConfVersion": {
      "Type" : "String",
      "Description" : "Enter version identifier for corresponding bench.conf.json version."
    },
    "StackTTL" : {
      "Description" : "Duration in minutes after which the stack should be deleted",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "1440",
      "Default": "120"
    },
    "VPC" : {
      "Type" : "AWS::EC2::VPC::Id",
      "Description" : "VpcId of your existing Virtual Private Cloud (VPC)",
      "Default" : "vpc-0a47c5ea196366c69",
      "ConstraintDescription" : "must be the VPC Id of an existing Virtual Private Cloud."
    },
    "Subnet" : {
      "Type" : "AWS::EC2::Subnet::Id",
      "Description" : "The list of SubnetIds in your Virtual Private Cloud (VPC)",
      "Default" : "subnet-026f3672bb4e96107",
      "ConstraintDescription" : "must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud."
    },


    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "t2.2xlarge",
      "AllowedValues" : [ "t1.micro", "t2.micro", "t2.small", "t2.medium", "t2.2xlarge", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription" : "Must be a valid EC2 instance type."
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Name of an existing EC2 key pair to enable SSH access to the ECS instances",
      "Default": "team-benchmark",
      "ConstraintDescription" : "Must be a valid key pair name."
    },
    "AsgMaxSize": {
      "Type": "Number",
      "Description": "Maximum size and initial desired capacity of Auto Scaling Group",
      "Default": "4"
    },
    "SSHLocation" : {
      "Description" : "The IP address range that can be used to connect to the EC2 instances by using SSH",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "VolumeName" : {
      "Description" : "The name to be used for the EFS volume",
      "Type": "String",
      "MinLength": "1",
      "Default": "LogosBench"
    },
    "MountPoint" : {
      "Description" : "The Linux mount point for the EFS volume",
      "Type": "String",
      "MinLength": "1",
      "Default": "LogosBench"
    }
  },
  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "PV64"   },
      "t2.2xlarge"    : { "Arch" : "HVM64"  },
      "t2.small"    : { "Arch" : "HVM64"  },
      "t2.medium"   : { "Arch" : "HVM64"  }
    },
    "AWSRegionArch2AMI" : {
      "us-east-1"        : {"PV64" : "ami-09208ec5449c4f08c", "HVM64" : "ami-09208ec5449c4f08c", "HVMG2" : "ami-09208ec5449c4f08c"},
      "us-east-2"        : {"PV64" : "ami-01386c3897dff74da", "HVM64" : "ami-01386c3897dff74da", "HVMG2" : "ami-01386c3897dff74da"}
    }
  },
  "Resources": {
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DependsOn" : "BenchNodeRole",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "GroupDescription": "Enable SSH access via port 22",
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": { "Ref": "SSHLocation" } },
          { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "-1", "FromPort": "-1", "ToPort": "-1", "CidrIp": "0.0.0.0/0" }
        ]
      }
    },
    "BenchNodeIAMInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "BenchNodeRole"
          }
        ]
      }
    },
    "BenchNodeRole": {
      "Type": "AWS::IAM::Role",
      "Metadata" : { "Comment" : "This role requires permissions to delete each of the stack resources. All other stack resources depend directly or indirectly on this role via DependsOn, Ref, or Fn::GetAtt, to ensure that the role is the last of the stack resources to be deleted." },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "ManagedPolicyArns" : ["arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"],
        "Path": "/",
        "Policies" : [
          {
            "PolicyName": "AllowStackDeletionPolicy",
            "PolicyDocument": {
              "Version" : "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [ "cloudformation:DeleteStack" ],
                  "Resource": { "Ref" : "AWS::StackId" }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:Describe*",
                    "autoscaling:Describe*Scaling*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:*",
                    "cloudformation:CreateStack",
                    "cloudformation:DescribeStacks",
                    "cloudformation:DescribeStackEvents",
                    "cloudformation:DescribeStackResources",
                    "cloudformation:GetTemplate",
                    "cloudformation:ValidateTemplate"  
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [ "autoscaling:*AutoScalingGroup" ],
                  "Resource": "*",
                  "Condition": { "StringEquals": { "autoscaling:ResourceTag/aws:cloudformation:stack-id": { "Ref" : "AWS::StackId" } } }
                },
                {
                  "Effect": "Allow",
                  "Action": [ "autoscaling:DeleteLaunchConfiguration" ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [ "ec2:TerminateInstances", "ec2:DeleteSecurityGroup" ],
                  "Resource": "*",
                  "Condition": { "StringEquals": { "ec2:ResourceTag/aws:cloudformation:stack-id": { "Ref" : "AWS::StackId" } } }
                },
                {
                  "Effect": "Allow",
                  "Action": [ "iam:DeleteInstanceProfile", "iam:RemoveRoleFromInstanceProfile" ],
                  "Resource": { "Fn::Join" : ["", ["arn:aws:iam::", { "Ref" : "AWS::AccountId" }, ":instance-profile/", { "Ref" : "AWS::StackName" }, "-", "BenchNodeIAMInstanceProfile", "-*" ]] }
                },
                {
                  "Effect": "Allow",
                  "Action": [ "iam:DeleteRole", "iam:DetachRolePolicy", "iam:DeleteRolePolicy" ],
                  "Resource": { "Fn::Join" : ["", ["arn:aws:iam::", { "Ref" : "AWS::AccountId" }, ":role/", { "Ref" : "AWS::StackName" }, "-", "BenchNodeRole", "-*" ]] }
                }
              ]
            }
          }
        ]
      }
    },

    "LaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "MountConfig" : [ "ConfigureCFN" , "ConfigureTTL"]
          },
          "ConfigureCFN" : {
            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/usr/local/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource LaunchConfiguration ",
                  "         --configsets MountConfig ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              }
            },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                  "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
              }
            }
          },
          "ConfigureTTL" : {
            "files" : {
              "/usr/local/bin/deletestack.sh" : {
                "content" : { "Fn::Join" : ["", [ "aws cloudformation delete-stack --region ", { "Ref" : "AWS::Region" }, " --stack-name ", { "Ref" : "AWS::StackId" } ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              }
            },
            "commands" : {
              "schedule_stack_deletion" : {
                "command" : { "Fn::Join" : ["", [ "at -f /usr/local/bin/deletestack.sh now + ", { "Ref" : "StackTTL" }, " minutes" ]]}
              }
            }
          }
        }
      },
      "Properties": {
        "AssociatePublicIpAddress" : true,
        "ImageId": {
          "Fn::FindInMap": [ "AWSRegionArch2AMI", { "Ref": "AWS::Region" }, {
            "Fn::FindInMap": [ "AWSInstanceType2Arch", { "Ref": "InstanceType" }, "Arch" ]
          } ]
        },
        "InstanceType": { "Ref": "InstanceType" },
        "KeyName": { "Ref": "KeyName" },
        "SecurityGroups": [ { "Ref": "InstanceSecurityGroup" } ],
        "IamInstanceProfile" : { "Ref" : "BenchNodeIAMInstanceProfile" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",
          "apt-get update\n",
          "git clone https://github.com/aws/efs-utils /home/ubuntu/efs-utils && ",
          "cd /home/ubuntu/efs-utils/ && ",
          "./build-deb.sh && ",
          "sudo apt-get -y install ./build/amazon-efs-utils*deb && ",
          "cd .. && rm -rf efs-utils/ \n",
          "mkdir -p logs-efs\n","mount -t efs fs-10737f58:/ logs-efs\n",
          "aws s3 cp s3://logos-bench/helpers/prepare_local_files.sh /home/ubuntu/prepare_local_files.sh\n",
          "sudo chmod a+x /home/ubuntu/prepare_local_files.sh\n",
          "sudo /home/ubuntu/prepare_local_files.sh ",
          { "Ref": "LogosVersion" }, " ",
          { "Ref": "AgentVersion" }, " ",
          { "Ref": "LDBVersion" }, " ",
          { "Ref": "ConfVersion" }, "\n",
          "python /home/ubuntu/bench/agent.py &\n",
          "cfn-init -v ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource LaunchConfiguration ",
          "         --configsets MountConfig ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n",
          "cfn-signal -e $? ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource AutoScalingGroup ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      }
    },
    "AutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": [ ],
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT24H",
          "Count"   : { "Ref": "AsgMaxSize" }
        }
      },
      "Properties": {
        "VPCZoneIdentifier": [ { "Ref": "Subnet" } ],
        "LaunchConfigurationName": { "Ref": "LaunchConfiguration" },
        "MinSize": "0",
        "MaxSize": { "Ref": "AsgMaxSize" },
        "DesiredCapacity": { "Ref": "AsgMaxSize" },
        "Tags": [ {
          "Key": "Name",
          "Value": { "Ref": "AWS::StackName" },
          "PropagateAtLaunch": "true"
        } ]
      }
    }
  },
  "Outputs" : {

  }
}